name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          leangchhunhut/ecommerce-api:latest
          leangchhunhut/ecommerce-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Verify image was pushed
      run: |
        echo "✅ Docker image pushed successfully!"
        echo "📦 Image: leangchhunhut/ecommerce-api:latest"
        echo "🏷️ Tag: leangchhunhut/ecommerce-api:${{ github.sha }}"

  deploy-to-vps:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && (secrets.PRODUCTION_VPS_HOST != '' || vars.VPS_HOST != '')
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_VPS_HOST || vars.VPS_HOST }}
        username: ${{ secrets.VPS_USER || vars.VPS_USER || 'ecommerce' }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || vars.VPS_PORT || 22 }}
        timeout: 300s
        script: |
          set -e
          
          echo "🚀 Starting VPS deployment..."
          
          # Check deployment directory
          if [ ! -d "/opt/ecommerce-api" ]; then
            echo "❌ Deployment directory not found!"
            echo "Please run VPS setup script first: /path/to/scripts/vps-setup.sh"
            exit 1
          fi
          
          cd /opt/ecommerce-api
          echo "📁 Working in: $(pwd)"
          
          # Pull latest code
          echo "📥 Pulling latest code..."
          git fetch origin
          git reset --hard origin/main
          
          # Pull latest Docker image with force
          echo "🐳 Pulling latest Docker image..."
          docker pull leangchhunhut/ecommerce-api:latest
          
          # Remove existing API container to ensure fresh image
          echo "🛑 Stopping and removing existing API container..."
          docker stop ecommerce_api || true
          docker rm ecommerce_api || true
          
          # Remove old API image to ensure we use the latest
          echo "🧹 Removing old API image..."
          docker rmi leangchhunhut/ecommerce-api:latest || true
          
          # Pull fresh image again
          echo "🐳 Re-pulling latest Docker image..."
          docker pull leangchhunhut/ecommerce-api:latest
          
          # Deploy with zero-downtime strategy
          echo "🔄 Deploying application..."
          docker-compose -f docker-compose.vps.yml down
          docker-compose -f docker-compose.vps.yml pull api
          docker-compose -f docker-compose.vps.yml up -d --remove-orphans
          
          # Wait for services to start
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          # Verify deployment
          echo "🔍 Verifying deployment..."
          if docker-compose -f docker-compose.vps.yml ps | grep -q "Up"; then
            echo "✅ All containers are running!"
            
            # Optional health check
            if curl -f -m 10 http://localhost:3000/api/v1/health >/dev/null 2>&1; then
              echo "✅ Health check passed!"
            else
              echo "⚠️  Health check failed, but containers are running"
            fi
          else
            echo "❌ Some containers failed to start!"
            echo "📋 Container status:"
            docker-compose -f docker-compose.vps.yml ps
            echo "📋 Container logs:"
            docker-compose -f docker-compose.vps.yml logs --tail=50
            exit 1
          fi
          
          # Cleanup old images
          echo "🧹 Cleaning up old Docker images..."
          docker image prune -f
          
          echo "🎉 VPS deployment completed successfully!"