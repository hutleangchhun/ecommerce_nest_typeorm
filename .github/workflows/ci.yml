name: Docker CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: deploy-prod
  cancel-in-progress: true

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-api
  CONTAINER_NAME: ecommerce-api
  HOST_PORT: 3000
  CONTAINER_PORT: 3000
  NODE_VERSION: '20.x'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate required secrets
        run: |
          missing=0
          [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] && echo "Missing secret: DOCKERHUB_USERNAME" && missing=1
          [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ] && echo "Missing secret: DOCKERHUB_TOKEN" && missing=1
          [ -z "${{ secrets.VPS_HOST }}" ] && echo "Missing secret: VPS_HOST" && missing=1
          [ -z "${{ secrets.VPS_USER }}" ] && echo "Missing secret: VPS_USER" && missing=1
          [ -z "${{ secrets.VPS_SSH_KEY }}" ] && echo "Missing secret: VPS_SSH_KEY" && missing=1
          if [ "$missing" -eq 1 ]; then
            echo "One or more required secrets are missing."
            exit 1
          fi
          echo "IMAGE_NAME will be: ${{ env.IMAGE_NAME }}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Node build (precheck)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - run: npm ci --no-audit --no-fund
      - run: npm run build --if-present

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: true

      - name: Notify build completion
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üî® *Build Completed Successfully!*
            
            üì¶ *Project:* ${{ github.repository }}
            üè∑Ô∏è *Branch:* ${{ github.ref_name }}
            üìã *Commit:* `${{ github.sha }}`
            üë§ *Author:* ${{ github.actor }}
            üê≥ *Docker Image:* `${{ env.IMAGE_NAME }}:${{ github.sha }}`
            
            ‚è±Ô∏è *Time:* $(date '+%Y-%m-%d %H:%M:%S UTC')
          format: markdown

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-api
      CONTAINER_NAME: ecommerce-api
      HOST_PORT: 3000
      CONTAINER_PORT: 3000
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          envs: DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,IMAGE_NAME,CONTAINER_NAME,HOST_PORT,CONTAINER_PORT,GITHUB_SHA
          script: |
            if [ -n "$DOCKERHUB_USERNAME" ] && [ -n "$DOCKERHUB_TOKEN" ]; then
              echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            fi

            echo "Stopping old containers..."
            docker rm -f $CONTAINER_NAME ecommerce-api-container || true

            echo "Pulling latest image..."
            docker pull $IMAGE_NAME:${GITHUB_SHA}

            echo "Starting new container..."
            docker run -d --name $CONTAINER_NAME \
              -p 3000:3000 \ 
              --restart unless-stopped \
              -e NODE_ENV=production \
              -e PORT=3000 \
              -e DB_HOST=localhost \
              -e DB_PORT=5432 \
              -e DB_USERNAME=postgres \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e DB_NAME=ecommerce_db \
              -e TYPEORM_SYNCHRONIZE=true \
              -e TYPEORM_LOGGING=false \
              -e DB_SEED_DATA=true \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e JWT_EXPIRES_IN="8h" \
              -e REDIS_HOST=localhost \
              -e REDIS_PORT=6379 \
              $IMAGE_NAME:${GITHUB_SHA}

            echo "Cleaning up..."
            docker image prune -f

      - name: Notify deployment success
        uses: appleboy/telegram-action@master
        if: success()
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ‚úÖ *Deployment Successful!*
            
            üì¶ *Project:* ${{ github.repository }}
            üåê *Environment:* Production
            üîó *API URL:* `http://${{ secrets.VPS_HOST }}:3000`
            üìö *Swagger Docs:* `http://${{ secrets.VPS_HOST }}:3000/api/docs`
            üè• *Health Check:* `http://${{ secrets.VPS_HOST }}:3000/api/v1/health`
            
            üê≥ *Container:* `${{ env.CONTAINER_NAME }}`
            üñºÔ∏è *Image:* `${{ env.IMAGE_NAME }}:${{ github.sha }}`
            üë§ *Deployed by:* ${{ github.actor }}
            
            ‚è±Ô∏è *Time:* $(date '+%Y-%m-%d %H:%M:%S UTC')
          format: markdown

      - name: Notify deployment failure
        uses: appleboy/telegram-action@master
        if: failure()
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ‚ùå *Deployment Failed!*
            
            üì¶ *Project:* ${{ github.repository }}
            üè∑Ô∏è *Branch:* ${{ github.ref_name }}
            üìã *Commit:* `${{ github.sha }}`
            üë§ *Author:* ${{ github.actor }}
            
            üîç *Check logs:* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ‚è±Ô∏è *Time:* $(date '+%Y-%m-%d %H:%M:%S UTC')
          format: markdown