name: Docker Build & Security Scan

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  GITHUB_REGISTRY: ghcr.io
  DOCKERHUB_IMAGE: leangchhunhut/ecommerce-api
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for git-based versioning

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: image=moby/buildkit:master
        buildkitd-flags: --debug

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GITHUB_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.GITHUB_REGISTRY }}/${{ env.IMAGE_NAME }}
          ${{ env.DOCKERHUB_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=staging,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=E-commerce API
          org.opencontainers.image.description=NestJS E-commerce API with TypeORM and PostgreSQL
          org.opencontainers.image.vendor=E-commerce Team
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md

    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha,scope=build-${{ github.ref_name }}
          type=gha,scope=build-main
        cache-to: type=gha,mode=max,scope=build-${{ github.ref_name }}
        provenance: true
        sbom: true
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      if: github.event_name != 'pull_request'
      with:
        image: ${{ env.DOCKERHUB_IMAGE }}:latest
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM artifact
      uses: actions/upload-artifact@v4
      if: github.event_name != 'pull_request'
      with:
        name: sbom
        path: sbom.spdx.json

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        scanner: [trivy, grype]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      if: matrix.scanner == 'trivy'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKERHUB_IMAGE }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true
        vuln-type: 'os,library'
        scanners: 'vuln,secret,config'

    - name: Upload Trivy scan results
      if: matrix.scanner == 'trivy'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy'

    - name: Run Grype vulnerability scanner
      if: matrix.scanner == 'grype'
      uses: anchore/scan-action@v3
      id: scan
      continue-on-error: true
      with:
        image: ${{ env.DOCKERHUB_IMAGE }}:latest
        fail-build: false
        severity-cutoff: high
        output-format: sarif

    - name: Upload Grype scan results
      if: matrix.scanner == 'grype' && steps.scan.outputs.sarif != ''
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
        category: 'grype'

  cosign-sign:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
      packages: write

    steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GITHUB_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Sign Docker images with Cosign
      continue-on-error: true
      run: |
        echo "Signing Docker images with Cosign..."
        if docker manifest inspect ${{ env.DOCKERHUB_IMAGE }}:latest > /dev/null 2>&1; then
          cosign sign --yes ${{ env.DOCKERHUB_IMAGE }}:latest
        else
          echo "Docker Hub image not found, skipping signing"
        fi
        
        if docker manifest inspect ${{ env.GITHUB_REGISTRY }}/${{ env.IMAGE_NAME }}:latest > /dev/null 2>&1; then
          cosign sign --yes ${{ env.GITHUB_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        else
          echo "GitHub Container Registry image not found, skipping signing"
        fi

  image-tests:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test Docker image
      run: |
        echo "Testing Docker image functionality..."
        
        # Set up test environment
        docker network create test-network || true
        
        # Start test PostgreSQL database
        docker run -d --name test-postgres \
          --network test-network \
          -e POSTGRES_USER=test \
          -e POSTGRES_PASSWORD=test123 \
          -e POSTGRES_DB=ecommerce_test \
          -p 5433:5432 \
          postgres:15-alpine
        
        # Wait for database to be ready
        echo "Waiting for test database to be ready..."
        sleep 10
        
        # Run API container with database connection
        docker run --rm -d --name api-test \
          --network test-network \
          -e NODE_ENV=test \
          -e DB_HOST=test-postgres \
          -e DB_PORT=5432 \
          -e DB_USERNAME=test \
          -e DB_PASSWORD=test123 \
          -e DB_NAME=ecommerce_test \
          -e TYPEORM_SYNCHRONIZE=true \
          -e TYPEORM_LOGGING=false \
          -p 3001:3000 \
          ${{ env.DOCKERHUB_IMAGE }}:latest
        
        # Wait for container to start
        echo "Waiting for API container to start..."
        sleep 30
        
        # Check if container is running
        if ! docker ps | grep -q "api-test"; then
          echo "❌ Container failed to start"
          docker logs api-test
          docker stop test-postgres || true
          docker rm test-postgres || true
          docker network rm test-network || true
          exit 1
        fi
        
        # Test if container is responsive (basic health check)
        max_attempts=8
        attempt=1
        success=false
        
        while [ $attempt -le $max_attempts ] && [ "$success" = "false" ]; do
          echo "Health check attempt $attempt/$max_attempts"
          
          # First check if container is still running
          if ! docker ps | grep -q "api-test"; then
            echo "❌ Container stopped unexpectedly"
            break
          fi
          
          # Check if the application is responding (try both root and health endpoint)
          if curl -f -m 10 http://localhost:3001/api/v1/health >/dev/null 2>&1; then
            echo "✅ Container health endpoint responding"
            success=true
          elif curl -f -m 10 http://localhost:3001 >/dev/null 2>&1; then
            echo "✅ Container root endpoint responding"
            success=true
          else
            echo "⏳ Waiting for container to respond... (attempt $attempt/$max_attempts)"
            if [ $attempt -eq 4 ]; then
              echo "📋 Container logs for debugging:"
              docker logs api-test --tail=20
            fi
            sleep 15
            ((attempt++))
          fi
        done
        
        # Cleanup
        docker stop api-test || true
        docker stop test-postgres || true
        docker rm test-postgres || true
        docker network rm test-network || true
        
        if [ "$success" = "false" ]; then
          echo "❌ Container health check failed after $max_attempts attempts"
          exit 1
        fi
        
        echo "✅ Docker image tests completed successfully"