name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-api
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          # Navigate to deployment directory
          cd /opt/ecommerce-api || { echo "Deployment directory not found"; exit 1; }
          
          # Pull latest changes
          git pull origin main
          
          # Pull latest Docker image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-api:latest
          
          # Stop existing containers
          docker-compose -f docker-compose.vps.yml down
          
          # Start new containers
          docker-compose -f docker-compose.vps.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Check if containers are running
          sleep 10
          if docker-compose -f docker-compose.vps.yml ps | grep -q "Up"; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Deployment failed - containers not running"
            docker-compose -f docker-compose.vps.yml logs
            exit 1
          fi

    - name: Health Check
      run: |
        sleep 30
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.VPS_HOST }}:3000/api/v1/categories || echo "000")
        if [ "$response" = "200" ]; then
          echo "‚úÖ Health check passed!"
        else
          echo "‚ùå Health check failed with response code: $response"
          exit 1
        fi

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "üöÄ Deployment to VPS completed successfully!"
        else
          echo "‚ùå Deployment to VPS failed!"
        fi